"""
Script d'entra√Ænement pour le mod√®le de pr√©diction de mouvement ML
G√©n√®re des donn√©es synth√©tiques et entra√Æne un mod√®le de pr√©diction de posture corporelle
"""

import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import os
import math
import pickle
from torch.utils.data import DataLoader, TensorDataset
import matplotlib.pyplot as plt
from datetime import datetime

# Importer les classes du pr√©dicteur
from utils.body_motion_predictor import (
    BodyMotionNetwork, 
    ImprovedBodyMotionNetwork,
    SequentialBodyMotionNetwork,
    MLBodyPredictor
)

class MotionDataGenerator:
    """G√©n√©rateur de donn√©es pour l'entra√Ænement du mod√®le de pr√©diction de mouvement"""
    
    def __init__(self):
        # Param√®tres des poses
        self.num_joints = 20
        self.num_quaternions = 4
        self.sequence_length = 10
        
        # Limites pour les valeurs des quaternions
        self.quat_min = -1.0
        self.quat_max = 1.0
    
    def random_quaternion(self):
        """G√©n√®re un quaternion al√©atoire normalis√©"""
        quat = np.random.uniform(self.quat_min, self.quat_max, self.num_quaternions)
        norm = np.linalg.norm(quat)
        if norm > 0:
            quat /= norm
        return quat.tolist()
    
    def create_random_pose(self):
        """Cr√©e une pose al√©atoire avec des quaternions pour chaque articulation"""
        pose = {}
        for i in range(self.num_joints):
            pose[f'joint_{i+1}'] = self.random_quaternion()
        return pose
    
    def create_walking_sequence(self, num_frames):
        """Cr√©e une s√©quence de marche avec des variations al√©atoires"""
        sequence = []
        for _ in range(num_frames):
            pose = self.create_random_pose()
            sequence.append(pose)
        return sequence
    
    def create_training_dataset(self, num_walking_sequences=100, num_static_poses=100):
        """Cr√©e le dataset d'entra√Ænement complet"""
        print("üõ†Ô∏è  Cr√©ation du dataset d'entra√Ænement...")
        
        dataset = []
        
        # S√©quences de marche
        for _ in range(num_walking_sequences):
            sequence = self.create_walking_sequence(self.sequence_length)
            dataset.append(sequence)
        
        # Postures statiques
        for _ in range(num_static_poses):
            pose = self.create_random_pose()
            dataset.append([pose] * self.sequence_length)  # R√©p√©ter la m√™me pose
        
        print(f"‚úÖ Dataset cr√©√© avec {len(dataset)} s√©quences")
        return dataset
    
    def poses_to_tensors(self, poses_data):
        """Convertit les donn√©es de poses en tenseurs PyTorch"""
        all_inputs = []
        all_targets = []
        
        for sequence in poses_data:
            for i in range(len(sequence) - 1):
                input_ = sequence[i]
                target = sequence[i + 1]
                
                # Aplatir les quaternions
                input_flat = []
                for quat in input_.values():
                    input_flat.extend(quat)
                
                target_flat = []
                for quat in target.values():
                    target_flat.extend(quat)
                
                all_inputs.append(input_flat)
                all_targets.append(target_flat)
        
        # Convertir en tenseurs
        inputs_tensor = torch.FloatTensor(all_inputs)
        targets_tensor = torch.FloatTensor(all_targets)
        
        print(f"üìè Tenseurs cr√©√©s - Inputs: {inputs_tensor.shape}, Targets: {targets_tensor.shape}")
        return inputs_tensor, targets_tensor

class ModelTrainer:
    """Classe pour entra√Æner les mod√®les de pr√©diction de mouvement"""
    
    def __init__(self, model_type="improved"):
        self.model_type = model_type
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        print(f"üñ•Ô∏è  Device utilis√©: {self.device}")
        
        # Dimensions du mod√®le
        self.input_size = 24   # 6 IMUs √ó 4 (quaternion WXYZ)
        self.output_size = 80  # 20 parties du corps √ó 4 (quaternion WXYZ)
        self.hidden_size = 128
        
        # Cr√©er le mod√®le
        self.model = self._create_model()
        self.model.to(self.device)
        
        print(f"üß† Mod√®le cr√©√©: {model_type}")
        print(f"üìè Architecture: {self.input_size} ‚Üí {self.hidden_size} ‚Üí {self.output_size}")
    
    def _create_model(self):
        """Cr√©e le mod√®le selon le type sp√©cifi√©"""
        if self.model_type == "improved":
            return ImprovedBodyMotionNetwork(self.input_size, self.hidden_size, self.output_size)
        elif self.model_type == "sequential":
            return SequentialBodyMotionNetwork(self.input_size, self.hidden_size, self.output_size)
        else:
            return BodyMotionNetwork(self.input_size, self.hidden_size, self.output_size)
    
    def train_model(self, train_data, val_data=None, epochs=100, batch_size=32, learning_rate=0.001):
        """Entra√Æne le mod√®le avec les donn√©es fournies"""
        print(f"üöÄ D√©but de l'entra√Ænement - {epochs} √©poques")
        
        # Pr√©parer les donn√©es
        train_inputs, train_targets = train_data
        train_dataset = TensorDataset(train_inputs, train_targets)
        train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)
        
        # Pr√©parer la validation si fournie
        val_loader = None
        if val_data:
            val_inputs, val_targets = val_data
            val_dataset = TensorDataset(val_inputs, val_targets)
            val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)
        
        # Optimiseur et fonction de perte
        optimizer = optim.Adam(self.model.parameters(), lr=learning_rate, weight_decay=1e-5)
        criterion = nn.MSELoss()
        scheduler = optim.lr_scheduler.ReduceLROnPlateau(optimizer, patience=10, factor=0.5)
        
        # Historique d'entra√Ænement
        train_losses = []
        val_losses = []
        best_val_loss = float('inf')
        
        self.model.train()
        
        for epoch in range(epochs):
            epoch_train_loss = 0.0
            num_batches = 0
            
            # Phase d'entra√Ænement
            for batch_inputs, batch_targets in train_loader:
                batch_inputs = batch_inputs.to(self.device)
                batch_targets = batch_targets.to(self.device)
                
                optimizer.zero_grad()
                outputs = self.model(batch_inputs)
                loss = criterion(outputs, batch_targets)
                loss.backward()
                optimizer.step()
                
                epoch_train_loss += loss.item()
                num_batches += 1
            
            avg_train_loss = epoch_train_loss / num_batches
            train_losses.append(avg_train_loss)
            
            # Phase de validation
            if val_loader:
                self.model.eval()
                epoch_val_loss = 0.0
                with torch.no_grad():
                    for batch_inputs, batch_targets in val_loader:
                        batch_inputs = batch_inputs.to(self.device)
                        batch_targets = batch_targets.to(self.device)
                        
                        outputs = self.model(batch_inputs)
                        loss = criterion(outputs, batch_targets)
                        epoch_val_loss += loss.item()
                
                avg_val_loss = epoch_val_loss / len(val_loader)
                val_losses.append(avg_val_loss)
                
                # Scheduler
                scheduler.step(avg_val_loss)
                
                print(f"Epoch [{epoch+1}/{epochs}] - "
                      f"Train Loss: {avg_train_loss:.6f}, "
                      f"Val Loss: {avg_val_loss:.6f}")
                
                # Sauvegarder le meilleur mod√®le
                if avg_val_loss < best_val_loss:
                    best_val_loss = avg_val_loss
                    self._save_best_model()
            else:
                print(f"Epoch [{epoch+1}/{epochs}] - Train Loss: {avg_train_loss:.6f}")
        
        print(f"‚úÖ Entra√Ænement termin√©! Meilleure validation: {best_val_loss:.6f}")
        
        return {
            'train_losses': train_losses,
            'val_losses': val_losses,
            'best_val_loss': best_val_loss
        }
    
    def _save_best_model(self):
        """Sauvegarde le meilleur mod√®le"""
        model_dir = os.path.join(os.path.dirname(__file__), 'data')
        os.makedirs(model_dir, exist_ok=True)
        
        model_path = os.path.join(model_dir, 'motion_model.pth')
        torch.save(self.model.state_dict(), model_path)
        print(f"üíæ Meilleur mod√®le sauvegard√©: {model_path}")

def main():
    """Fonction principale d'entra√Ænement"""
    print("üéØ === Entra√Ænement du Mod√®le de Pr√©diction de Mouvement ===")
    
    # Cr√©er le g√©n√©rateur de donn√©es
    data_generator = MotionDataGenerator()
    
    # G√©n√©rer le dataset
    poses_data = data_generator.create_training_dataset(
        num_walking_sequences=50,
        num_static_poses=500
    )
    
    # Convertir en tenseurs
    inputs, targets = data_generator.poses_to_tensors(poses_data)
    
    # Division train/validation
    train_size = int(0.8 * len(inputs))
    train_inputs = inputs[:train_size]
    train_targets = targets[:train_size]
    val_inputs = inputs[train_size:]
    val_targets = targets[train_size:]
    
    print(f"üìä Dataset divis√© - Train: {len(train_inputs)}, Validation: {len(val_inputs)}")
    
    # Cr√©er et entra√Æner le mod√®le
    trainer = ModelTrainer("improved")
    
    # Entra√Ænement
    history = trainer.train_model(
        train_data=(train_inputs, train_targets),
        val_data=(val_inputs, val_targets),
        epochs=50,
        batch_size=32,
        learning_rate=0.001
    )
    
    print("üéâ Entra√Ænement termin√© avec succ√®s!")
    print(f"üìà Perte finale: {history['best_val_loss']:.6f}")

if __name__ == "__main__":
    main()